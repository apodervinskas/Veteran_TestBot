import asyncio
import os
import textwrap
from typing import List

import feedparser
import httpx
from bs4 import BeautifulSoup
from aiogram import Bot, Dispatcher, F
from aiogram.client.default import DefaultBotProperties
from aiogram.filters import CommandStart
from aiogram.types import (
    Message, CallbackQuery,
    ReplyKeyboardMarkup, KeyboardButton,
    InlineKeyboardMarkup, InlineKeyboardButton
)
from dotenv import load_dotenv

load_dotenv()

TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN", "").strip()
if not TELEGRAM_TOKEN:
    raise RuntimeError("TELEGRAM_TOKEN is not set. Put it in .env")

# –î–∂–µ—Ä–µ–ª–∞
MVA_NEWS_URL = os.getenv("MVA_NEWS_URL", "").strip()
RSS_MINVETERANS = os.getenv("RSS_MINVETERANS", "").strip()
RSS_CITY_DNIPRO = os.getenv("RSS_CITY_DNIPRO", "").strip()

FACEBOOK_PAGE_ID = os.getenv("FACEBOOK_PAGE_ID", "").strip()
FACEBOOK_TOKEN = os.getenv("FACEBOOK_TOKEN", "").strip()
FACEBOOK_POST_LIMIT = int(os.getenv("FACEBOOK_POST_LIMIT", "5"))

bot = Bot(token=TELEGRAM_TOKEN, default=DefaultBotProperties(parse_mode="HTML"))
dp = Dispatcher()

# ---------- –¢–µ–∫—Å—Ç–∏ ----------
WELCOME = (
    "üëã –í—ñ—Ç–∞—î–º–æ –≤ —á–∞—Ç–±–æ—Ç—ñ –£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –≤–µ—Ç–µ—Ä–∞–Ω—Å—å–∫–æ—ó –ø–æ–ª—ñ—Ç–∏–∫–∏ –º. –î–Ω—ñ–ø—Ä–æ!\n"
    "–û–±–µ—Ä–∏ —Ä–æ–∑–¥—ñ–ª —É –º–µ–Ω—é –Ω–∏–∂—á–µ."
)

ABOUT_TEXT = "‚ÑπÔ∏è <b>–ü—Ä–æ –Ω–∞—Å</b>\n–û–±–µ—Ä—ñ—Ç—å –ø—ñ–¥—Ä–æ–∑–¥—ñ–ª:"
ABOUT_SUBTEXT = {
    "mission": "üéØ <b>–ú—ñ—Å—ñ—è —Ç–∞ –≤—ñ–∑—ñ—è</b>\n–ö–æ—Ä–æ—Ç–∫–∏–π –æ–ø–∏—Å –º—ñ—Å—ñ—ó, —Ü—ñ–ª–µ–π —Ç–∞ –ø—Ä–∏–Ω—Ü–∏–ø—ñ–≤ —Ä–æ–±–æ—Ç–∏.",
    "contacts": "üìû <b>–ö–æ–Ω—Ç–∞–∫—Ç–∏ —Ç–∞ –∞–¥—Ä–µ—Å–∞</b>\n‚Ä¢ –ê–¥—Ä–µ—Å–∞: ...\n‚Ä¢ –¢–µ–ª–µ—Ñ–æ–Ω: ...\n‚Ä¢ Email: ...",
    "schedule": "üóì <b>–ì—Ä–∞—Ñ—ñ–∫ –ø—Ä–∏–π–æ–º—É</b>\n‚Ä¢ –ü–Ω-–ü—Ç: ...\n‚Ä¢ –°–±-–ù–¥: –≤–∏—Ö—ñ–¥–Ω—ñ",
}

SERVICES_TEXT = "üß© <b>–ü–æ—Å–ª—É–≥–∏ —Ç–∞ –ø—ñ–¥—Ç—Ä–∏–º–∫–∞</b>\n–û–±–µ—Ä—ñ—Ç—å –ø—ñ–¥—Ä–æ–∑–¥—ñ–ª:"
PROGRAMS_TEXT = "üèõ <b>–ü—Ä–æ–≥—Ä–∞–º–∏ —Ç–∞ –ø—Ä–æ—î–∫—Ç–∏</b>\n–û–±–µ—Ä—ñ—Ç—å –ø—ñ–¥—Ä–æ–∑–¥—ñ–ª:"
NEWS_TEXT = "üóû <b>–ù–æ–≤–∏–Ω–∏ —Ç–∞ –ø–æ–¥—ñ—ó</b>\n–û–±–µ—Ä—ñ—Ç—å –¥–∂–µ—Ä–µ–ª–æ:"
PSYCH_TEXT = "üß† <b>–ü—Å–∏—Ö–æ–ª–æ–≥—ñ—á–Ω–∞ –ø—ñ–¥—Ç—Ä–∏–º–∫–∞</b>\n–û–±–µ—Ä—ñ—Ç—å –ø—ñ–¥—Ä–æ–∑–¥—ñ–ª:"
LEGAL_TEXT = "‚öñÔ∏è <b>–Æ—Ä–∏–¥–∏—á–Ω–∞ –¥–æ–ø–æ–º–æ–≥–∞</b>\n–û–±–µ—Ä—ñ—Ç—å –ø—ñ–¥—Ä–æ–∑–¥—ñ–ª:"
FAQ_TEXT = "‚ùì <b>FAQ</b>\n–û–±–µ—Ä—ñ—Ç—å –ø—ñ–¥—Ä–æ–∑–¥—ñ–ª:"
FEEDBACK_TEXT = "‚úâÔ∏è <b>–ó–≤–æ—Ä–æ—Ç–Ω–∏–π –∑–≤‚Äô—è–∑–æ–∫</b>\n–û–±–µ—Ä—ñ—Ç—å –ø—ñ–¥—Ä–æ–∑–¥—ñ–ª:"

LEGAL_CONTACTS = textwrap.dedent("""
üìå <b>–ë–§ ¬´–ü—Ä–∞–≤–æ –Ω–∞ –∑–∞—Ö–∏—Å—Ç¬ª</b>
üåê https://r2p.org.ua/

üìå <b>–ì–û ¬´–°—ñ—á¬ª</b>
üåê https://sich-pravo.org/
""").strip()

# ---------- –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∏ ----------
def main_menu_kb() -> ReplyKeyboardMarkup:
    rows = [
        [KeyboardButton(text="1‚É£ –ü—Ä–æ –Ω–∞—Å"), KeyboardButton(text="2‚É£ –ü–æ—Å–ª—É–≥–∏ —Ç–∞ –ø—ñ–¥—Ç—Ä–∏–º–∫–∞")],
        [KeyboardButton(text="3‚É£ –ü—Ä–æ–≥—Ä–∞–º–∏ —Ç–∞ –ø—Ä–æ–µ–∫—Ç–∏"), KeyboardButton(text="4‚É£ –ù–æ–≤–∏–Ω–∏ —Ç–∞ –ø–æ–¥—ñ—ó")],
        [KeyboardButton(text="5‚É£ –ü—Å–∏—Ö–æ–ª–æ–≥—ñ—á–Ω–∞ –ø—ñ–¥—Ç—Ä–∏–º–∫–∞"), KeyboardButton(text="6‚É£ –Æ—Ä–∏–¥–∏—á–Ω–∞ –¥–æ–ø–æ–º–æ–≥–∞")],
        [KeyboardButton(text="7‚É£ FAQ"), KeyboardButton(text="8‚É£ –ó–≤–æ—Ä–æ—Ç–Ω–∏–π –∑–≤‚Äô—è–∑–æ–∫")],
        [KeyboardButton(text="üîç –ü–æ—à—É–∫"), KeyboardButton(text="üìç –ù–∞–π–±–ª–∏–∂—á—ñ –≤–µ—Ç–µ—Ä–∞–Ω—Å—å–∫—ñ —Ü–µ–Ω—Ç—Ä–∏")],
    ]
    return ReplyKeyboardMarkup(keyboard=rows, resize_keyboard=True)

def about_kb() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="1.1 –ú—ñ—Å—ñ—è —Ç–∞ –≤—ñ–∑—ñ—è", callback_data="about:mission")],
        [InlineKeyboardButton(text="1.2 –ö–æ–Ω—Ç–∞–∫—Ç–∏ —Ç–∞ –∞–¥—Ä–µ—Å–∞", callback_data="about:contacts")],
        [InlineKeyboardButton(text="1.3 –ì—Ä–∞—Ñ—ñ–∫ –ø—Ä–∏–π–æ–º—É", callback_data="about:schedule")],
        [InlineKeyboardButton(text="‚¨Ö –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="nav:home")],
    ])

def services_kb() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="2.1 –ü–µ—Ä–µ–ª—ñ–∫ –ø–æ—Å–ª—É–≥", callback_data="svc:list")],
        [InlineKeyboardButton(text="2.2 –°—Ç–∞—Ç—É—Å –£–ë–î / —ñ–Ω–≤–∞–ª—ñ–¥ –≤—ñ–π–Ω–∏", callback_data="svc:status")],
        [InlineKeyboardButton(text="2.3 –°–æ—Ü—ñ–∞–ª—å–Ω—ñ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—ó", callback_data="svc:social")],
        [InlineKeyboardButton(text="2.4 –ú–µ–¥–∏—á–Ω–∞ —Ç–∞ –ø—Å–∏—Ö–æ–ª–æ–≥—ñ—á–Ω–∞ –¥–æ–ø–æ–º–æ–≥–∞", callback_data="svc:medpsych")],
        [InlineKeyboardButton(text="2.5 –Æ—Ä–∏–¥–∏—á–Ω—ñ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—ó", callback_data="svc:legal")],
        [InlineKeyboardButton(text="2.6 –ü—Ä–æ—Ñ–ø–µ—Ä–µ–ø—ñ–¥–≥–æ—Ç–æ–≤–∫–∞", callback_data="svc:retrain")],
        [InlineKeyboardButton(text="2.7 –ó–∞–ø–∏—Å –Ω–∞ –ø—Ä–∏–π–æ–º üìÖ", callback_data="svc:appointment")],
        [InlineKeyboardButton(text="‚¨Ö –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="nav:home")],
    ])

def programs_kb() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="3.1 –ü–æ—Ç–æ—á–Ω—ñ –ø—Ä–æ–≥—Ä–∞–º–∏ –ø—ñ–¥—Ç—Ä–∏–º–∫–∏", callback_data="prog:current")],
        [InlineKeyboardButton(text="3.2 –ì—Ä–∞–Ω—Ç–∏ —Ç–∞ –ø—ñ–ª—å–≥–∏", callback_data="prog:grants")],
        [InlineKeyboardButton(text="3.3 –ù–∞–≤—á–∞–ª—å–Ω—ñ –∫—É—Ä—Å–∏", callback_data="prog:courses")],
        [InlineKeyboardButton(text="3.4 –°–ø–æ—Ä—Ç–∏–≤–Ω—ñ –∑–∞—Ö–æ–¥–∏", callback_data="prog:sport")],
        [InlineKeyboardButton(text="3.5 –ö—É–ª—å—Ç—É—Ä–Ω—ñ —Ç–∞ —Å–æ—Ü—ñ–∞–ª—å–Ω—ñ –ø–æ–¥—ñ—ó", callback_data="prog:culture")],
        [InlineKeyboardButton(text="3.6 –ü—Ä–∞—Ü–µ–≤–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –≤–µ—Ç–µ—Ä–∞–Ω—ñ–≤", callback_data="prog:jobs")],
        [InlineKeyboardButton(text="3.7 –ú–µ–Ω—Ç–æ—Ä—Å—å–∫—ñ —Ç–∞ –≤–æ–ª–æ–Ω—Ç–µ—Ä—Å—å–∫—ñ —ñ–Ω—ñ—Ü—ñ–∞—Ç–∏–≤–∏", callback_data="prog:mentor")],
        [InlineKeyboardButton(text="‚¨Ö –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="nav:home")],
    ])

def news_kb() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="4.1 –ê–Ω–æ–Ω—Å–∏ –∑–∞—Ö–æ–¥—ñ–≤ (–º—ñ—Å—Ç–æ)", callback_data="news:city")],
        [InlineKeyboardButton(text="4.2 –û—Å—Ç–∞–Ω–Ω—ñ –Ω–æ–≤–∏–Ω–∏ (–ú—ñ–Ω–≤–µ—Ç–µ—Ä–∞–Ω—ñ–≤)", callback_data="news:minv")],
        [InlineKeyboardButton(text="4.3 Facebook –£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è", callback_data="news:fb")],
        [InlineKeyboardButton(text="‚¨Ö –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="nav:home")],
    ])

def psych_kb() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="5.1 –ï–∫—Å—Ç—Ä–µ–Ω–∞ –¥–æ–ø–æ–º–æ–≥–∞ (–≥–∞—Ä—è—á—ñ –ª—ñ–Ω—ñ—ó)", callback_data="psy:hotlines")],
        [InlineKeyboardButton(text="5.2 –û–Ω–ª–∞–π–Ω-—á–∞—Ç –∑ –ø—Å–∏—Ö–æ–ª–æ–≥–æ–º", callback_data="psy:chat")],
        [InlineKeyboardButton(text="5.3 –ó–∞–ø–∏—Å –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—é", callback_data="psy:appointment")],
        [InlineKeyboardButton(text="5.4 –°—Ç–∞—Ç—Ç—ñ —Ç–∞ –≤—ñ–¥–µ–æ –ø–æ –∞–¥–∞–ø—Ç–∞—Ü—ñ—ó", callback_data="psy:materials")],
        [InlineKeyboardButton(text="‚¨Ö –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="nav:home")],
    ])

def legal_kb() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="6.1 –ó—Ä–∞–∑–∫–∏ –∑–∞—è–≤ —Ç–∞ –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤", callback_data="law:templates")],
        [InlineKeyboardButton(text="6.2 –Ø–∫ –æ—Ñ–æ—Ä–º–∏—Ç–∏ –ø—ñ–ª—å–≥–∏", callback_data="law:benefits")],
        [InlineKeyboardButton(text="6.3 –ö–æ–Ω—Ç–∞–∫—Ç–∏ —é—Ä–∏—Å—Ç—ñ–≤", callback_data="law:contacts")],
        [InlineKeyboardButton(text="‚¨Ö –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="nav:home")],
    ])

def faq_kb() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="7.1 –ü–æ—à–∏—Ä–µ–Ω—ñ –ø–∏—Ç–∞–Ω–Ω—è", callback_data="faq:common")],
        [InlineKeyboardButton(text="7.2 –ó–∞–¥–∞—Ç–∏ –ø–∏—Ç–∞–Ω–Ω—è –æ–ø–µ—Ä–∞—Ç–æ—Ä—É", callback_data="faq:operator")],
        [InlineKeyboardButton(text="‚¨Ö –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="nav:home")],
    ])

def feedback_kb() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="8.1 –ü–æ–≤—ñ–¥–æ–º–∏—Ç–∏ –ø—Ä–æ –ø—Ä–æ–±–ª–µ–º—É", callback_data="fb:issue")],
        [InlineKeyboardButton(text="8.2 –ó–∞–ª–∏—à–∏—Ç–∏ –≤—ñ–¥–≥—É–∫", callback_data="fb:review")],
        [InlineKeyboardButton(text="8.3 –ü–æ–¥–∞—Ç–∏ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—é", callback_data="fb:suggest")],
        [InlineKeyboardButton(text="‚¨Ö –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="nav:home")],
    ])

# ---------- –£—Ç–∏–ª—ñ—Ç–∏ –¥–ª—è –Ω–æ–≤–∏–Ω ----------
async def fetch_rss(feed_url: str, limit: int = 5) -> List[str]:
    if not feed_url:
        return ["‚ö†Ô∏è RSS-—Å—Ç—Ä—ñ—á–∫–∞ –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–∞."]
    try:
        parsed = feedparser.parse(feed_url)
        items = []
        for entry in parsed.entries[:limit]:
            title = entry.get("title", "–ë–µ–∑ –Ω–∞–∑–≤–∏")
            link = entry.get("link", "")
            items.append(f"‚Ä¢ <a href=\"{link}\">{title}</a>")
        return items or ["‚ÑπÔ∏è –ù–∞—Ä–∞–∑—ñ –Ω–µ–º–∞—î –Ω–æ–≤–∏—Ö –ø—É–±–ª—ñ–∫–∞—Ü—ñ–π."]
    except Exception as e:
        return [f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è RSS: {e}"]

async def fetch_fb_posts(page_id: str, token: str, limit: int = 5) -> List[str]:
    if not page_id or not token:
        return ["‚ö†Ô∏è Facebook –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ. –î–æ–¥–∞–π—Ç–µ FACEBOOK_PAGE_ID —ñ FACEBOOK_TOKEN —É .env"]
    url = f"https://graph.facebook.com/v19.0/{page_id}/posts"
    params = {"access_token": token, "limit": max(1, min(limit, 10))}
    try:
        async with httpx.AsyncClient(timeout=15) as client:
            r = await client.get(url, params=params)
            r.raise_for_status()
            data = r.json()
            posts = []
            for p in data.get("data", []):
                post_id = p.get("id")
                message = (p.get("message") or "–ü—É–±–ª—ñ–∫–∞—Ü—ñ—è").split("\n")[0]
                link = f"https://www.facebook.com/{post_id.replace('_', '/posts/')}"
                posts.append(f"‚Ä¢ <a href=\"{link}\">{message[:120]}...</a>")
            return posts or ["‚ÑπÔ∏è –ü–æ–∫–∏ —â–æ –Ω–µ–º–∞—î –Ω–æ–≤–∏—Ö –¥–æ–ø–∏—Å—ñ–≤."]
    except Exception as e:
        return [f"‚ùå –ü–æ–º–∏–ª–∫–∞ Facebook API: {e}"]

async def fetch_mva_news_html(url: str, limit: int = 6) -> List[str]:
    if not url:
        return ["‚ö†Ô∏è URL –¥–ª—è –ú—ñ–Ω–≤–µ—Ç–µ—Ä–∞–Ω—ñ–≤ –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–∏–π."]
    try:
        async with httpx.AsyncClient(timeout=20) as client:
            r = await client.get(url, follow_redirects=True)
            r.raise_for_status()
            soup = BeautifulSoup(r.text, "html.parser")

            items: List[str] = []
            for a in soup.select("article a, .views-row a, .news a"):
                title = (a.get_text() or "").strip()
                href = (a.get("href") or "").strip()
                if not title or not href:
                    continue
                if len(title) < 6:
                    continue
                if href.startswith("/"):
                    href = "https://mva.gov.ua" + href
                if href.startswith("https://mva.gov.ua") and "#comment" not in href:
                    items.append(f"‚Ä¢ <a href=\"{href}\">{title}</a>")
                if len(items) >= limit:
                    break

            if not items:
                for a in soup.find_all("a"):
                    title = (a.get_text() or "").strip()
                    href = (a.get("href") or "").strip()
                    if not title or not href:
                        continue
                    if href.startswith("/"):
                        href = "https://mva.gov.ua" + href
                    if href.startswith("https://mva.gov.ua") and len(title) > 6:
                        items.append(f"‚Ä¢ <a href=\"{href}\">{title}</a>")
                    if len(items) >= limit:
                        break

            return items[:limit] or ["‚ÑπÔ∏è –ù–∞—Ä–∞–∑—ñ –Ω–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ –Ω–æ–≤–∏–Ω–∏ –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ."]
    except Exception as e:
        return [f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥—É –ú—ñ–Ω–≤–µ—Ç–µ—Ä–∞–Ω—ñ–≤: {e}"]

# ---------- –•–µ–Ω–¥–ª–µ—Ä–∏ ----------
@dp.message(CommandStart())
async def on_start(message: Message):
    await message.answer(WELCOME, reply_markup=main_menu_kb())

@dp.message(F.text == "1‚É£ –ü—Ä–æ –Ω–∞—Å")
async def about(message: Message):
    await message.answer(ABOUT_TEXT, reply_markup=about_kb())

@dp.callback_query(F.data.startswith("about:"))
async def about_sub(cb: CallbackQuery):
    key = cb.data.split(":")[1]
    text = ABOUT_SUBTEXT.get(key, "‚ÑπÔ∏è –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –±—É–¥–µ –¥–æ–¥–∞–Ω–∞ –Ω–∞–π–±–ª–∏–∂—á–∏–º —á–∞—Å–æ–º.")
    await cb.message.edit_text(text, reply_markup=about_kb())
    await cb.answer()

@dp.message(F.text == "2‚É£ –ü–æ—Å–ª—É–≥–∏ —Ç–∞ –ø—ñ–¥—Ç—Ä–∏–º–∫–∞")
async def services(message: Message):
    await message.answer(SERVICES_TEXT, reply_markup=services_kb())

@dp.message(F.text == "3‚É£ –ü—Ä–æ–≥—Ä–∞–º–∏ —Ç–∞ –ø—Ä–æ–µ–∫—Ç–∏")
async def programs(message: Message):
    await message.answer(PROGRAMS_TEXT, reply_markup=programs_kb())

@dp.message(F.text == "4‚É£ –ù–æ–≤–∏–Ω–∏ —Ç–∞ –ø–æ–¥—ñ—ó")
async def news(message: Message):
    await message.answer(NEWS_TEXT, reply_markup=news_kb())

@dp.callback_query(F.data == "news:minv")
async def news_minv(cb: CallbackQuery):
    items = await fetch_mva_news_html(MVA_NEWS_URL, limit=6)
    await cb.message.edit_text("üóû <b>–û—Å—Ç–∞–Ω–Ω—ñ –Ω–æ–≤–∏–Ω–∏ (–ú—ñ–Ω–≤–µ—Ç–µ—Ä–∞–Ω—ñ–≤)</b>\n\n" + "\n".join(items), reply_markup=news_kb())
    await cb.answer()

@dp.callback_query(F.data == "news:city")
async def news_city(cb: CallbackQuery):
    items = await fetch_rss(RSS_CITY_DNIPRO, limit=5)
    await cb.message.edit_text("üì£ <b>–ê–Ω–æ–Ω—Å–∏ –∑–∞—Ö–æ–¥—ñ–≤ (–º—ñ—Å—Ç–æ)</b>\n\n" + "\n".join(items), reply_markup=news_kb())
    await cb.answer()

@dp.callback_query(F.data == "news:fb")
async def news_fb(cb: CallbackQuery):
    items = await fetch_fb_posts(FACEBOOK_PAGE_ID, FACEBOOK_TOKEN, FACEBOOK_POST_LIMIT)
    await cb.message.edit_text("üìò <b>Facebook –£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è</b>\n\n" + "\n".join(items), reply_markup=news_kb())
    await cb.answer()

@dp.message(F.text == "5‚É£ –ü—Å–∏—Ö–æ–ª–æ–≥—ñ—á–Ω–∞ –ø—ñ–¥—Ç—Ä–∏–º–∫–∞")
async def psych(message: Message):
    await message.answer(PSYCH_TEXT, reply_markup=psych_kb())

@dp.message(F.text == "6‚É£ –Æ—Ä–∏–¥–∏—á–Ω–∞ –¥–æ–ø–æ–º–æ–≥–∞")
async def legal(message: Message):
    await message.answer(LEGAL_TEXT, reply_markup=legal_kb())

@dp.callback_query(F.data == "law:contacts")
async def law_contacts(cb: CallbackQuery):
    await cb.message.edit_text("üìö <b>–ö–æ–Ω—Ç–∞–∫—Ç–∏ —é—Ä–∏—Å—Ç—ñ–≤</b>\n\n" + LEGAL_CONTACTS, reply_markup=legal_kb())
    await cb.answer()

@dp.callback_query(F.data == "law:templates")
async def law_templates(cb: CallbackQuery):
    await cb.message.edit_text("üìÑ –ó—Ä–∞–∑–∫–∏ –∑–∞—è–≤ —Ç–∞ –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤:\n‚Ä¢ (–¥–æ–¥–∞–º–æ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ —à–∞–±–ª–æ–Ω–∏/Google Drive)\n", reply_markup=legal_kb())
    await cb.answer()

@dp.callback_query(F.data == "law:benefits")
async def law_benefits(cb: CallbackQuery):
    await cb.message.edit_text("üí≥ –Ø–∫ –æ—Ñ–æ—Ä–º–∏—Ç–∏ –ø—ñ–ª—å–≥–∏:\n‚Ä¢ –ö—Ä–æ–∫ 1 ...\n‚Ä¢ –ö—Ä–æ–∫ 2 ...\n(–¥–æ–¥–∞–º–æ –æ—Ñ—ñ—Ü—ñ–π–Ω—ñ –ø–æ—Å–∏–ª–∞–Ω–Ω—è)", reply_markup=legal_kb())
    await cb.answer()

@dp.message(F.text == "7‚É£ FAQ")
async def faq(message: Message):
    await message.answer(FAQ_TEXT, reply_markup=faq_kb())

@dp.message(F.text == "8‚É£ –ó–≤–æ—Ä–æ—Ç–Ω–∏–π –∑–≤‚Äô—è–∑–æ–∫")
async def feedback(message: Message):
    await message.answer(FEEDBACK_TEXT, reply_markup=feedback_kb())

@dp.callback_query(F.data == "nav:home")
async def nav_home(cb: CallbackQuery):
    await cb.message.edit_text(WELCOME)
    await cb.message.answer("‚¨áÔ∏è –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", reply_markup=main_menu_kb())
    await cb.answer()

@dp.callback_query(F.data.startswith(("svc:", "prog:", "psy:", "faq:", "fb:")))
async def placeholders(cb: CallbackQuery):
    section = cb.data.split(":")[0]
    await cb.message.edit_text("‚ÑπÔ∏è –ö–æ–Ω—Ç–µ–Ω—Ç —Ü—å–æ–≥–æ —Ä–æ–∑–¥—ñ–ª—É –±—É–¥–µ –¥–æ–¥–∞–Ω–æ –Ω–∞–π–±–ª–∏–∂—á–∏–º —á–∞—Å–æ–º.")
    kb_map = {
        "svc": services_kb(),
        "prog": programs_kb(),
        "psy": psych_kb(),
        "faq": faq_kb(),
        "fb": feedback_kb(),
    }
    await cb.message.edit_reply_markup(reply_markup=kb_map.get(section))
    await cb.answer()

@dp.message(F.text == "üîç –ü–æ—à—É–∫")
async def search(message: Message):
    await message.answer("–í–≤–µ–¥—ñ—Ç—å –∫–ª—é—á–æ–≤–µ —Å–ª–æ–≤–æ –¥–ª—è –ø–æ—à—É–∫—É (–ø–æ–∫–∏ —â–æ –ø—Ä–æ—Å—Ç–∏–π —Ç–µ–∫—Å—Ç–æ–≤–∏–π –ø–æ—à—É–∫ –¥–æ–¥–∞–º–æ –ø—ñ–∑–Ω—ñ—à–µ).")

@dp.message(F.text == "üìç –ù–∞–π–±–ª–∏–∂—á—ñ –≤–µ—Ç–µ—Ä–∞–Ω—Å—å–∫—ñ —Ü–µ–Ω—Ç—Ä–∏")
async def nearest_centers(message: Message):
    await message.answer("–ù–∞–¥—ñ—à–ª—ñ—Ç—å –≤–∞—à—É –ª–æ–∫–∞—Ü—ñ—é –∞–±–æ —Ä–∞–π–æ–Ω ‚Äî —ñ –º–∏ –ø—ñ–¥–∫–∞–∂–µ–º–æ –Ω–∞–π–±–ª–∏–∂—á—ñ —Ü–µ–Ω—Ç—Ä–∏ (—Ñ—É–Ω–∫—Ü—ñ—é –¥–æ–¥–∞–º–æ –ø—ñ—Å–ª—è —É–∑–≥–æ–¥–∂–µ–Ω–Ω—è –¥–∂–µ—Ä–µ–ª).")

@dp.message()
async def fallback(message: Message):
    await message.answer("–ù–µ –∑–æ–≤—Å—ñ–º –∑—Ä–æ–∑—É–º—ñ–≤ –∑–∞–ø–∏—Ç. –û–±–µ—Ä—ñ—Ç—å —Ä–æ–∑–¥—ñ–ª —É –º–µ–Ω—é –∞–±–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å /start.", reply_markup=main_menu_kb())

# aiogram 3.7: startup handler –±–µ–∑ –∞—Ä–≥—É–º–µ–Ω—Ç—ñ–≤
async def on_startup():
    print("Bot started")

async def main():
    dp.startup.register(on_startup)
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
